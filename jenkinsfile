pipeline {

    agent any

    stages {
        //공통사용 항목 변수 지정 및 build 유발자와 commit 내역을 함께 Slack 알림으로 전송
        stage("Set Variable") {
            steps {
                script {
                    DOCKER_IMAGE = ''
                    //생성할 Docker Image 이름 지정
                    DOCKER_IMAGE_NAME = "image 이름 지정"
                    //Container Registry 경로
                    IMAGE_STORAGE = "https://registry.hub.docker.com/"
                    //Container Registry 접근 Credential id
                    IMAGE_STORAGE_CREDENTIAL = "jenkins 설정에서 등록한 docker credential의 ID를 넣어줍니다"
                    //알림받을 채널
                    SLACK_CHANNEL = "사용하고자 하는 slack 채널명 입력"
                    SLACK_START_AND_FINISH_COLOR = "#778899";
                    SLACK_SUCCESS_COLOR = "#2C953C";
                    SLACK_FAIL_COLOR = "#FF3232";
                    // Git Commit 계정
                    GIT_COMMIT_AUTHOR = sh(script: "git --no-pager show -s --format=%an ${env.GIT_COMMIT}", returnStdout: true).trim();
                    // Git Commit 메시지
                    GIT_COMMIT_MESSAGE = sh(script: "git --no-pager show -s --format=%B ${env.GIT_COMMIT}", returnStdout: true).trim();
                    //PR_ID - PullRequest ID number
                    PR_ID = "${GIT_COMMIT_MESSAGE}".substring("${GIT_COMMIT_MESSAGE}".indexOf('#')+1,"${GIT_COMMIT_MESSAGE}".indexOf(')')).trim();
                    //PR_BRANCH - PullRequest 를 요청한 branch
                    PR_BRANCH = "${GIT_COMMIT_MESSAGE}".split("from")[1].split("into")[0].trim();
                }
            }
            post {
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_START_AND_FINISH_COLOR,
                        message:
                        "==================================================================\n" +
                        "\n" +
                        "배포 파이프라인이 시작되었습니다.\n" +
                        "${env.JOB_NAME}(${env.BUILD_NUMBER})\n" +
                        "\n" +
                        "-GIT_PR_ID-\n" +
                        ":  ${PR_ID}\n" +
                        "\n" +
                        "-GIT_PR_BRANCH-\n" +
                        ":  ${PR_BRANCH}\n" +
                        "\n" +
                        "-GIT_COMMIT_AUTHOR-\n" +
                        ":  ${GIT_COMMIT_AUTHOR}\n" +
                        "\n" +
                        "-GIT_COMMIT_MESSAGE-\n" +
                        ":  ${GIT_COMMIT_MESSAGE}\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}"
                    )
                }
            }
        }

        //Git Checkout
        stage('gitea clone') {
            when {
                branch "develop"
            }
            steps {
                echo"Cloning Repository"
                git branch: 'develop',
                    credentialsId: 'jenkins 에서 등록한 github or gitea or gitlab 등의 credential',
                    url: 'github or gitea or gitlab 등 URL'
            }
            post{
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Gitea Checkout에 성공하였습니다."
                    )
                    echo "Successfully Cloned Repository"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Gitea Checkout에 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Fail Cloned Repository"
                }
            }
        }

        //Gradle Build & Test
        stage('Build & Test & JacocoTestCoverageVerification') {
            when {
                branch "develop"
            }
            steps {
                sh '''
                    echo 'Build Gradle Start'
                    ./gradlew clean build
                '''
            }
            post {
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Build & Test 에 성공하였습니다."
                    )
                    echo "Build Gradle Success"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Build & Test 에 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Build Gradle Fail"
                }
            }
        }

        //Sonarqube Scanner - dev
        stage("sonarqube analysis-dev") {
            when {
                branch "develop"
            }
            steps{
                script{
                    def scannerHome = tool 'jenkins Global Tool Configuration에서 등록한 SonarQube Scanner 이름';
                    withSonarQubeEnv(credentialsId:"jenkins에서 등록한 sonarqube credential",installationName:'jenkins 설정에서 등록한 sonarqube 이름') {
                    sh "${scannerHome}/bin/sonar-scanner \
                        -Dsonar.branch.name=master \
                        -Dsonar.language=java \
                        -Dsonar.java.source=1.8 \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.test=src/test/java \
                        -Dsonar.test.inclusion=**/*Test.java \
                        -Dsonar.issuesReport.console.enable=true \
                        -Dsonar.junit.reportPaths=build/test-results/test \
                        -Dsonar.java.binaries=build/classes \
                        -Dsonar.java.coveragePlugin=jacoco \
                        -Dsonar.coverage.jacoco.xmlReportPaths=build/jacoco/jacoco.xml \
                        -Dsonar.java.libraries.empty=true \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.exclusions=**/dto/**,**/exception/**,**/constant/**,**/SpringInitProjectApplication.java,**/WebRestController.java,**/FileUploadYaml.java \
                        -Dsonar.java.checkstyle.reportPaths=build/reports/checkstyle-output/checkstyle-report.xml \
                        -Dsonar.web.javaAdditionalOpts=-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.5.0.jar=web \
                        -Dsonar.ce.javaAdditionalOpts=-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.5.0.jar=ce \
                        "
                    }
                }
            }
            post{
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Dev branch SonarQube Scanning 을 성공하였습니다."
                    )
                    echo "Success sonarqube analysis"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Dev branch SonarQube Scanning 을 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Fail sonarqube analysis"
                }
            }
        }

        //Sonarqube Scanner - feature(dev로 merge될 branch), Sonar-bot 을 통한 PR-comment 사용 시 설정
        stage("sonarqube analysis-feature") {
            when {
                branch "develop"
            }
            steps{
                script{
                    def scannerHome = tool 'SonarQube-Scanner-Feature';
                    withSonarQubeEnv(credentialsId:"sonarqube-token",installationName:'SonarQube-PR') {
                    sh "${scannerHome}/bin/sonar-scanner \
                        -Dsonar.pullrequest.key='${PR_ID}' \
                        -Dsonar.pullrequest.base=master \
                        -Dsonar.pullrequest.branch='${PR_BRANCH}' \
                        -Dsonar.language=java \
                        -Dsonar.java.source=1.8 \
                        -Dsonar.sources=src/main/java \
                        -Dsonar.test=src/test/java \
                        -Dsonar.test.inclusion=**/*Test.java \
                        -Dsonar.issuesReport.console.enable=true \
                        -Dsonar.junit.reportPaths=build/test-results/test \
                        -Dsonar.java.binaries=build/classes \
                        -Dsonar.java.coveragePlugin=jacoco \
                        -Dsonar.coverage.jacoco.xmlReportPaths=build/jacoco/jacoco.xml \
                        -Dsonar.java.libraries.empty=true \
                        -Dsonar.sourceEncoding=UTF-8 \
                        -Dsonar.exclusions=**/dto/**,**/exception/**,**/constant/**,**/SpringInitProjectApplication.java,**/WebRestController.java,**/FileUploadYaml.java \
                        -Dsonar.java.checkstyle.reportPaths=build/reports/checkstyle-output/checkstyle-report.xml \
                        -Dsonar.web.javaAdditionalOpts=-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.5.0.jar=web \
                        -Dsonar.ce.javaAdditionalOpts=-javaagent:./extensions/plugins/sonarqube-community-branch-plugin-1.5.0.jar=ce \
                        "
                    }
                }
            }
            post{
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Feature branch SonarQube Scanning 을 성공하였습니다."
                    )
                    echo "Success sonarqube analysis"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Feature branch SonarQube Scanning 을 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Fail sonarqube analysis"
                }
            }
        }

        //SonarQube Quality Gate
        stage('SonarQube Quality Gate'){
            when {
                branch "develop"
            }
            steps{
                timeout(time: 1, unit: 'MINUTES') {
                    script{
                        echo "Start~~~~"
                        def qg = waitForQualityGate()
                        echo "Status: ${qg.status}"
                        if(qg.status != 'OK') {
                            echo "NOT OK Status: ${qg.status}"
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else{
                            echo "OK Status: ${qg.status}"
                        }
                        echo "End~~~~"
                    }
                }
            }
            post{
                success {
                    echo "Success sonarqube analysis"
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "SonarQube Quality Gate 를 통과하였습니다."
                    )
                }
                failure {
                    echo "Fail sonarqube analysis"
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "SonarQube Quality Gate 를 통과하지 못하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                }
            }
        }

        //Dockerfile을 통해 Docker Image 생성
        stage('Build Docker') {
            when {
                branch "develop"
            }
            steps {
                sh 'echo "Image Build Start"'
                script {
                    DOCKER_IMAGE = docker.build DOCKER_IMAGE_NAME
                }
            }
            post {
                success {
                    sh 'echo "Successfully Build Docker"'
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Docker Image Build 를 성공하였습니다."
                    )
                }
                failure {
                    sh 'echo "Build Docker Fail"'
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Docker Image Build 를 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                }
            }
        }

        //Docker Image를 Docker-hub 에 push
        stage('Push Docker') {
            when {
                branch "develop"
            }
            steps {
                sh 'echo "Docker Image Push Start"'
                script {
                    docker.withRegistry(IMAGE_STORAGE, IMAGE_STORAGE_CREDENTIAL){
                    DOCKER_IMAGE.push("latest")
                    }
                }
            }
            post {
                success {
                    sh 'docker rmi $(docker images -q -f dangling=true)'
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Docker registry 에 Image 를 성공적으로 push 하였습니다."
                    )
                    echo "Push Docker Success"
                }
                failure {
                    error 'This Image Push Fail'
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Docker registry 에 Image push 를 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Push Docker Fail"
                }
            }
        }

        //nginx 패키지와 docker 패키지를 배포할서버로 보낸 후 deploy.sh을 실행
        stage('Remote Server Docker Pull') {
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                sh 'echo "Remote Server Docker Pull Start"'
                 sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "springboot-remote-server",
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    execCommand: "docker pull gunyoung/dev:latest"
                                )
                            ]
                        )
                    ]
                 )
            }
            post {
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "Docker pull 을 성공하였습니다."
                    )
                    echo "Completed Remote Server Docker pull"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "Docker pull 을 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Fail Remote Server Docker Pull"
                }
            }
        }

        //(dev 환경)nginx 패키지와 docker 패키지를 배포할서버로 보낸 후 deploy.sh을 실행
        stage('Dev-Remote Server Exec deploy.sh') {
            when {
                branch "develop"
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                sh 'echo "Remote Server Deploy start"'
                 sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "springboot-remote-server",
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    sourceFiles:"nginx/**",
                                ),
                                sshTransfer(
                                    sourceFiles:"docker-dev/**",
                                    execCommand: "chmod +x /home/ec2-user/docker-dev/deploy.sh"
                                ),
                                sshTransfer(
                                    execCommand: "/home/ec2-user/docker-dev/deploy.sh"
                                ),
                                sshTransfer(
                                    execCommand: 'docker image prune -f --filter="dangling=true"'
                                )
                            ]
                        )
                    ]
                 )
            }
            post {
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "dev 환경 배포를를 성공하였습니다."
                    )
                    echo "Completed Remote Server Deploy"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "dev 환경 배포를 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Fail Remote Server Deploy"
                }
            }
        }

        //(operation 환경)nginx 패키지와 docker 패키지를 배포할서버로 보낸 후 deploy.sh을 실행
        stage('Operation-Remote Server Exec deploy.sh') {
            when {
                branch "main"
            }
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                sh 'echo "Remote Server Deploy Start"'
                 sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "springboot-remote-server",
                            verbose: true,
                            transfers: [
                                sshTransfer(
                                    sourceFiles:"nginx/**",
                                ),
                                sshTransfer(
                                    sourceFiles:"docker-operation/**",
                                    execCommand: "chmod +x /home/ec2-user/docker-operation/deploy.sh"
                                ),
                                sshTransfer(
                                    execCommand: "/home/ec2-user/docker-operation/deploy.sh"
                                ),
                                sshTransfer(
                                    execCommand: 'docker image prune -f --filter="dangling=true"'
                                )
                            ]
                        )
                    ]
                 )
            }
            post {
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_SUCCESS_COLOR,
                        message: "operation 환경 배포를를 성공하였습니다."
                    )
                    echo "Completed Remote Server Deploy"
                }
                failure {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_FAIL_COLOR,
                        message: "operation 환경 배포를 실패하였습니다.\n" +
                        "\n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}console\n" +
                        "=================================================================="
                    )
                    echo "Fail Remote Server Deploy"
                }
            }
        }

        //위의 모든  stage 들이 성공하면 slack 알림을 보냄
        stage('Finish Successfully'){
            steps {
                sh 'echo "All stages are successfully finished !"'
            }
            post {
                success {
                    slackSend (
                        channel: SLACK_CHANNEL,
                        color: SLACK_START_AND_FINISH_COLOR,
                        message:
                        "배포가 성공적으로 완료되었습니다.\n" +
                        "${env.JOB_NAME}(${env.BUILD_NUMBER})\n" +
                        " \n" +
                        "<-More info->\n" +
                        "${env.BUILD_URL}\n"+
                        "=================================================================="
                    )
                }
            }
        }
    } //stages 끝나는 지점

}

