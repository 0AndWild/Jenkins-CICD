pipeline {
    agent any

    environment {
        registryCredential = '{jenkins 에서 등록한 docker-hub credentials}'
        DOCKER_IMAGE_NAME = '{docker 이미지 build시 사용할 이름}'
        DOCKER_IMAGE = ''
    }

    stages {
        //git checkout
        stage('gitea clone') {
            steps {
                echo 'Clonning Repository'
//                 slackSend (channel: 'jenkins', color: '#FFFF00', message: "STARTED: job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
                git branch: 'main or dev 등 checkout을 할 branch',
                    credentialsId: '{jenkins 에서 등록한 github or gitea or gitlab 등의 credential}',
                    url: '{github or gitea or gitlab 등 URL}'
            }
            post{
                success {
                    sh 'echo "Successfully Cloned Repository"'
                }
                failure {
                    sh 'echo "Fail Cloned Repository'
                }
            }
        }

        //Build & Junit Test & Jacoco 리포트 생성
        stage('Build & Test & Jacoco') {
            steps {
                sh '''
                    echo 'Build Gradle Start'
                    ./gradlew clean build
                '''
            }
            post {
                failure {
                    sh 'echo "Build Gradle Fail"'
                }
            }
        }

        //SonarQube
        stage("sonarqube") {
            steps{
                script{
                    def scannerHome = tool '{jenkins Global Tool Configuration에서 등록한 SonarQube Scanner 이름}';
                    withSonarQubeEnv(credentialsId:"{jenkins에서 등록한 sonarqube credential}",installationName:'{jenkins 설정에서 등록한 sonarqube 이름}') {
                    sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
            post{
                success {
                    sh 'echo "Success sonarqube analysis"'
                }
                failure {
                    sh 'echo "Fail sonarqube analysis'
                }
            }
        }

        stage('SonarQube Quality Gate'){
            steps{
                timeout(time: 1, unit: 'MINUTES') {
                    script{
                        echo "Start~~~~"
                        def qg = waitForQualityGate()
                        echo "Status: ${qg.status}"
                        if(qg.status != 'OK') {
                            echo "NOT OK Status: ${qg.status}"
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        } else{
                            echo "OK Status: ${qg.status}"
                        }
                        echo "End~~~~"
                    }
                }
            }
        }

        //Dockerfile을 통해 Docker Image 생성
        stage('Build Docker') {
            steps {
                sh 'echo "Image Build Start"'
                script {
                    DOCKER_IMAGE = docker.build DOCKER_IMAGE_NAME
                }
            }
            post {
                success {
                    sh 'echo "Successfully Build Docker"'
                }
                failure {
                    sh 'echo "Build Docker Fail"'
                }
            }
        }

        stage('Push Docker') {
            steps {
                sh 'echo "Docker Image Push Start"'
                script {
                    docker.withRegistry('https://registry.hub.docker.com/', registryCredential){
                    DOCKER_IMAGE.push("latest")
                    }
                }
            }
            post {
                success {
                    sh 'docker rmi $(docker images -q -f dangling=true)'
                }
                failure {
                    error 'This Image Push Fail'
                }
            }
        }

        stage('Remote Server Docker Pull') {
            steps([$class: 'BapSshPromotionPublisherPlugin']) {
                sh 'echo "Remote Server Docker Pull Start"'
                 sshPublisher(
                    continueOnError: false, failOnError: true,
                    publishers: [
                        sshPublisherDesc(
                            configName: "springboot-remote-server",
                            verbose: true,
                            transfers: [
                            sshTransfer(
                                    sourceFiles:"nginx/**",
                                ),
                                sshTransfer(
                                    sourceFiles:"docker/**",
                                    execCommand: "chmod +x /home/ubuntu/docker/deploy.sh"
                                ),
                                sshTransfer(
                                    execCommand: "/home/ubuntu/docker/deploy.sh"
                                )
                            ]
                        )
                    ]
                 )
            }
            post {
                success {
                    sh 'echo "Completed Remote Server Docker pull"'
                }
                failure {
                    sh 'echo "Fail Remote Server Docker Pull"'
                }
            }
        }
    } //stages 끝나는 지점

}

